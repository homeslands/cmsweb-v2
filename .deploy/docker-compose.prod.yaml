volumes:
  mysql:

services:
  cmsweb-api:
    image: ghcr.io/homeslands/cmsweb-api:latest
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:3000/api/${TAG}/healthCheck/status",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s # Give more time for MySQL to become ready
    environment:
      NODE_ENV: ${NODE_ENV}
      HOST_MYSQL: ${HOST_MYSQL}
      PORT_MYSQL: ${PORT_MYSQL}
      USER_MYSQL: ${USER_MYSQL}
      PASSWORD_MYSQL: ${PASSWORD_MYSQL}
      DATABASE_MYSQL: ${DATABASE_MYSQL}
      HASH_SALT: ${HASH_SALT}
      JWT_SECRET: ${JWT_SECRET}
      PASSPORT_SECRET: ${PASSPORT_SECRET}
      DURATION: ${DURATION}
      REFRESHABLE_DURATION: ${REFRESHABLE_DURATION}
      SWAGGER_ENDPOINT: ${SWAGGER_ENDPOINT}
      TAG: ${TAG}
      BROKER_URL: ${BROKER_URL}
      TZ: Asia/Ho_Chi_Minh
    restart: unless-stopped

  cmsweb-db:
    image: mysql:8.2.0
    volumes:
      - mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${PASSWORD_MYSQL}
      MYSQL_DATABASE: ${DATABASE_MYSQL}
      TZ: Asia/Ho_Chi_Minh
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 60s # Increase timeout to give MySQL more time
      retries: 5

  cmsweb-ui:
    image: ghcr.io/homeslands/cmsweb-ui:latest
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5137"] # TCP check on port 5137
      interval: 10s # Increase interval between health checks
      timeout: 10s # Increase timeout for slower responses
      retries: 5
      start_period: 60s # Give the frontend app more time to become ready
    restart: unless-stopped

  cmsweb-docs:
    image: ghcr.io/homeslands/cmsweb-docs:latest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 10s # Increase interval between health checks
      timeout: 10s # Increase timeout for slower responses
      retries: 5
      start_period: 60s # Give the frontend app more time to become ready
    restart: unless-stopped

  cmsweb-kafka:
    image: "bitnami/kafka:latest"
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@cmsweb-kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://cmsweb-kafka:9092
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics.sh",
          "--list",
          "--bootstrap-server",
          "localhost:9092",
        ]
      interval: 30s # Time between each health check
      timeout: 10s # Timeout for each health check
      retries: 5 # Number of retries before marking the container as unhealthy

  cmsweb-notification:
    image: ghcr.io/homeslands/cmsweb-notification:latest
    environment:
      HOST_MYSQL: ${HOST_MYSQL}
      PORT_MYSQL: ${PORT_MYSQL}
      USER_MYSQL: ${USER_MYSQL}
      PASSWORD_MYSQL: ${PASSWORD_MYSQL}
      DATABASE_MYSQL: ${DATABASE_MYSQL}
      NODE_ENV: ${NODE_ENV}
      BROKER_URL: ${BROKER_URL}
      TZ: Asia/Ho_Chi_Minh
    restart: unless-stopped

networks:
  default:
    external: true
    name: scoobydoo
